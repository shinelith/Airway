package com.shinestudio.app.airway.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shinestudio.app.airway.db.Airport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table airports.
*/
public class AirportDao extends AbstractDao<Airport, Long> {

    public static final String TABLENAME = "airports";

    /**
     * Properties of entity Airport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Geohash = new Property(1, String.class, "geohash", false, "GEOHASH");
        public final static Property Icao = new Property(2, String.class, "icao", false, "ICAO");
        public final static Property Iata = new Property(3, String.class, "iata", false, "IATA");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property City = new Property(5, String.class, "city", false, "CITY");
        public final static Property Country = new Property(6, String.class, "country", false, "COUNTRY");
        public final static Property Timezone = new Property(7, Integer.class, "timezone", false, "TIMEZONE");
        public final static Property Latitude = new Property(8, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(9, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Elevation = new Property(10, Integer.class, "elevation", false, "ELEVATION");
        public final static Property Tran_alt = new Property(11, Integer.class, "tran_alt", false, "TRAN_ALT");
        public final static Property Tran_level = new Property(12, Integer.class, "tran_level", false, "TRAN_LEVEL");
        public final static Property Longest_runway_length = new Property(13, Integer.class, "longest_runway_length", false, "LONGEST_RUNWAY_LENGTH");
    };


    public AirportDao(DaoConfig config) {
        super(config);
    }
    
    public AirportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'airports' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GEOHASH' TEXT," + // 1: geohash
                "'ICAO' TEXT," + // 2: icao
                "'IATA' TEXT," + // 3: iata
                "'NAME' TEXT," + // 4: name
                "'CITY' TEXT," + // 5: city
                "'COUNTRY' TEXT," + // 6: country
                "'TIMEZONE' INTEGER," + // 7: timezone
                "'LATITUDE' REAL," + // 8: latitude
                "'LONGITUDE' REAL," + // 9: longitude
                "'ELEVATION' INTEGER," + // 10: elevation
                "'TRAN_ALT' INTEGER," + // 11: tran_alt
                "'TRAN_LEVEL' INTEGER," + // 12: tran_level
                "'LONGEST_RUNWAY_LENGTH' INTEGER);"); // 13: longest_runway_length
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'airports'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Airport entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String geohash = entity.getGeohash();
        if (geohash != null) {
            stmt.bindString(2, geohash);
        }
 
        String icao = entity.getIcao();
        if (icao != null) {
            stmt.bindString(3, icao);
        }
 
        String iata = entity.getIata();
        if (iata != null) {
            stmt.bindString(4, iata);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(7, country);
        }
 
        Integer timezone = entity.getTimezone();
        if (timezone != null) {
            stmt.bindLong(8, timezone);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(9, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(10, longitude);
        }
 
        Integer elevation = entity.getElevation();
        if (elevation != null) {
            stmt.bindLong(11, elevation);
        }
 
        Integer tran_alt = entity.getTran_alt();
        if (tran_alt != null) {
            stmt.bindLong(12, tran_alt);
        }
 
        Integer tran_level = entity.getTran_level();
        if (tran_level != null) {
            stmt.bindLong(13, tran_level);
        }
 
        Integer longest_runway_length = entity.getLongest_runway_length();
        if (longest_runway_length != null) {
            stmt.bindLong(14, longest_runway_length);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Airport readEntity(Cursor cursor, int offset) {
        Airport entity = new Airport( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // geohash
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icao
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // iata
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // country
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // timezone
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // longitude
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // elevation
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // tran_alt
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // tran_level
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // longest_runway_length
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Airport entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGeohash(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcao(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIata(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCountry(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimezone(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setElevation(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setTran_alt(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTran_level(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setLongest_runway_length(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Airport entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Airport entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
