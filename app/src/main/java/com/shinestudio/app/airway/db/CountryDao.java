package com.shinestudio.app.airway.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shinestudio.app.airway.db.Country;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table countrys.
*/
public class CountryDao extends AbstractDao<Country, Void> {

    public static final String TABLENAME = "countrys";

    /**
     * Properties of entity Country.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Country = new Property(0, String.class, "country", false, "COUNTRY");
        public final static Property Airports = new Property(1, Integer.class, "airports", false, "AIRPORTS");
    };


    public CountryDao(DaoConfig config) {
        super(config);
    }
    
    public CountryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'countrys' (" + //
                "'COUNTRY' TEXT," + // 0: country
                "'AIRPORTS' INTEGER);"); // 1: airports
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'countrys'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Country entity) {
        stmt.clearBindings();
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(1, country);
        }
 
        Integer airports = entity.getAirports();
        if (airports != null) {
            stmt.bindLong(2, airports);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Country readEntity(Cursor cursor, int offset) {
        Country entity = new Country( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // country
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // airports
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Country entity, int offset) {
        entity.setCountry(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAirports(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Country entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Country entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
