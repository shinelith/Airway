package com.shinestudio.app.airway.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shinestudio.app.airway.db.Runway;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table runways.
*/
public class RunwayDao extends AbstractDao<Runway, Void> {

    public static final String TABLENAME = "runways";

    /**
     * Properties of entity Runway.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Airport_id = new Property(0, Integer.class, "airport_id", false, "AIRPORT_ID");
        public final static Property Geohash = new Property(1, String.class, "geohash", false, "GEOHASH");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Heading = new Property(3, Integer.class, "heading", false, "HEADING");
        public final static Property Length = new Property(4, Integer.class, "length", false, "LENGTH");
        public final static Property Width = new Property(5, Integer.class, "width", false, "WIDTH");
        public final static Property Ils = new Property(6, Integer.class, "ils", false, "ILS");
        public final static Property Ils_frequency = new Property(7, Double.class, "ils_frequency", false, "ILS_FREQUENCY");
        public final static Property Ils_heading = new Property(8, Integer.class, "ils_heading", false, "ILS_HEADING");
        public final static Property Latitude = new Property(9, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(10, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Elevation = new Property(11, Integer.class, "elevation", false, "ELEVATION");
        public final static Property Glideslope_angle = new Property(12, Double.class, "glideslope_angle", false, "GLIDESLOPE_ANGLE");
        public final static Property Overflying_height = new Property(13, Double.class, "overflying_height", false, "OVERFLYING_HEIGHT");
        public final static Property Surface_type = new Property(14, Integer.class, "surface_type", false, "SURFACE_TYPE");
        public final static Property Status = new Property(15, Integer.class, "status", false, "STATUS");
    };


    public RunwayDao(DaoConfig config) {
        super(config);
    }
    
    public RunwayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'runways' (" + //
                "'AIRPORT_ID' INTEGER," + // 0: airport_id
                "'GEOHASH' TEXT," + // 1: geohash
                "'NAME' TEXT," + // 2: name
                "'HEADING' INTEGER," + // 3: heading
                "'LENGTH' INTEGER," + // 4: length
                "'WIDTH' INTEGER," + // 5: width
                "'ILS' INTEGER," + // 6: ils
                "'ILS_FREQUENCY' REAL," + // 7: ils_frequency
                "'ILS_HEADING' INTEGER," + // 8: ils_heading
                "'LATITUDE' REAL," + // 9: latitude
                "'LONGITUDE' REAL," + // 10: longitude
                "'ELEVATION' INTEGER," + // 11: elevation
                "'GLIDESLOPE_ANGLE' REAL," + // 12: glideslope_angle
                "'OVERFLYING_HEIGHT' REAL," + // 13: overflying_height
                "'SURFACE_TYPE' INTEGER," + // 14: surface_type
                "'STATUS' INTEGER);"); // 15: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'runways'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Runway entity) {
        stmt.clearBindings();
 
        Integer airport_id = entity.getAirport_id();
        if (airport_id != null) {
            stmt.bindLong(1, airport_id);
        }
 
        String geohash = entity.getGeohash();
        if (geohash != null) {
            stmt.bindString(2, geohash);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer heading = entity.getHeading();
        if (heading != null) {
            stmt.bindLong(4, heading);
        }
 
        Integer length = entity.getLength();
        if (length != null) {
            stmt.bindLong(5, length);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(6, width);
        }
 
        Integer ils = entity.getIls();
        if (ils != null) {
            stmt.bindLong(7, ils);
        }
 
        Double ils_frequency = entity.getIls_frequency();
        if (ils_frequency != null) {
            stmt.bindDouble(8, ils_frequency);
        }
 
        Integer ils_heading = entity.getIls_heading();
        if (ils_heading != null) {
            stmt.bindLong(9, ils_heading);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(10, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(11, longitude);
        }
 
        Integer elevation = entity.getElevation();
        if (elevation != null) {
            stmt.bindLong(12, elevation);
        }
 
        Double glideslope_angle = entity.getGlideslope_angle();
        if (glideslope_angle != null) {
            stmt.bindDouble(13, glideslope_angle);
        }
 
        Double overflying_height = entity.getOverflying_height();
        if (overflying_height != null) {
            stmt.bindDouble(14, overflying_height);
        }
 
        Integer surface_type = entity.getSurface_type();
        if (surface_type != null) {
            stmt.bindLong(15, surface_type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(16, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Runway readEntity(Cursor cursor, int offset) {
        Runway entity = new Runway( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // airport_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // geohash
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // heading
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // length
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // width
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ils
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // ils_frequency
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ils_heading
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // latitude
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // longitude
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // elevation
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // glideslope_angle
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // overflying_height
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // surface_type
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Runway entity, int offset) {
        entity.setAirport_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setGeohash(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeading(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setLength(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setWidth(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIls(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIls_frequency(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setIls_heading(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLatitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setLongitude(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setElevation(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setGlideslope_angle(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setOverflying_height(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setSurface_type(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setStatus(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Runway entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Runway entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
