package com.shinestudio.app.airway.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shinestudio.app.airway.db.Navaid;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table navaids.
*/
public class NavaidDao extends AbstractDao<Navaid, Long> {

    public static final String TABLENAME = "navaids";

    /**
     * Properties of entity Navaid.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Geohash = new Property(1, String.class, "geohash", false, "GEOHASH");
        public final static Property Identifier = new Property(2, String.class, "identifier", false, "IDENTIFIER");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Frequency = new Property(4, Double.class, "frequency", false, "FREQUENCY");
        public final static Property Vor = new Property(5, Boolean.class, "vor", false, "VOR");
        public final static Property Dme = new Property(6, Boolean.class, "dme", false, "DME");
        public final static Property Range = new Property(7, Integer.class, "range", false, "RANGE");
        public final static Property Latitude = new Property(8, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(9, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Elevation = new Property(10, Integer.class, "elevation", false, "ELEVATION");
        public final static Property Country_code = new Property(11, String.class, "country_code", false, "COUNTRY_CODE");
    };


    public NavaidDao(DaoConfig config) {
        super(config);
    }
    
    public NavaidDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'navaids' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GEOHASH' TEXT," + // 1: geohash
                "'IDENTIFIER' TEXT," + // 2: identifier
                "'NAME' TEXT," + // 3: name
                "'FREQUENCY' REAL," + // 4: frequency
                "'VOR' INTEGER," + // 5: vor
                "'DME' INTEGER," + // 6: dme
                "'RANGE' INTEGER," + // 7: range
                "'LATITUDE' REAL," + // 8: latitude
                "'LONGITUDE' REAL," + // 9: longitude
                "'ELEVATION' INTEGER," + // 10: elevation
                "'COUNTRY_CODE' TEXT);"); // 11: country_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'navaids'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Navaid entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String geohash = entity.getGeohash();
        if (geohash != null) {
            stmt.bindString(2, geohash);
        }
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(3, identifier);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Double frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindDouble(5, frequency);
        }
 
        Boolean vor = entity.getVor();
        if (vor != null) {
            stmt.bindLong(6, vor ? 1l: 0l);
        }
 
        Boolean dme = entity.getDme();
        if (dme != null) {
            stmt.bindLong(7, dme ? 1l: 0l);
        }
 
        Integer range = entity.getRange();
        if (range != null) {
            stmt.bindLong(8, range);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(9, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(10, longitude);
        }
 
        Integer elevation = entity.getElevation();
        if (elevation != null) {
            stmt.bindLong(11, elevation);
        }
 
        String country_code = entity.getCountry_code();
        if (country_code != null) {
            stmt.bindString(12, country_code);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Navaid readEntity(Cursor cursor, int offset) {
        Navaid entity = new Navaid( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // geohash
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // identifier
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // frequency
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // vor
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // dme
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // range
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // longitude
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // elevation
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // country_code
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Navaid entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGeohash(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdentifier(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFrequency(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setVor(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setDme(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setRange(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setElevation(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCountry_code(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Navaid entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Navaid entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
